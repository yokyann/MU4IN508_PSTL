#!/bin/sh

set 68 101 116 111 117 113 44 104 116 103 110 101 108 45 103 110 105 114 116 115 44 102 101 114 45 103 110 105 114 116 115 44 102 105 44 33 114 100 99 45 116 101 115 44 116 115 105 108 62 45 114 111 116 99 101 118 44 33 116 101 115 45 103 110 105 114 116 115 44 101 110 105 102 101 100 44 33 116 101 115 45 114 111 116 99 101 118 44 63 114 111 116 99 101 118 44 61 44 99 99 47 108 108 97 99 44 33 116 101 115 44 97 100 98 109 97 108 44 114 100 100 99 44 103 110 105 114 116 115 45 101 107 97 109 44 102 101 114 45 114 111 116 99 101 118 44 104 116 103 110 101 108 45 114 111 116 99 101 118 44 114 111 116 99 101 118 45 101 107 97 109 44 108 111 98 109 121 115 62 45 103 110 105 114 116 115 44 103 110 105 114 116 115 62 45 108 111 98 109 121 115 44 63 101 114 117 100 101 99 111 114 112 44 33 114 97 99 45 116 101 115 44 116 110 101 105 116 111 117 113 44 116 111 110 44 108 97 118 101 44 102 101 114 45 116 115 105 108 44 114 100 100 100 97 99 44 42 44 63 116 99 101 106 98 111 45 102 111 101 44 63 108 111 98 109 121 115 44 108 112 101 114 44 63 103 110 105 114 116 115 44 101 110 105 108 119 101 110 44 114 111 116 99 101 118 62 45 116 115 105 108 44 43 44 101 116 105 114 119 44 114 97 104 99 45 107 101 101 112 44 121 97 108 112 115 105 100 44 116 115 105 108 62 45 103 110 105 114 116 115 44 100 97 101 114 44 103 110 105 114 116 115 62 45 116 115 105 108 44 63 108 97 117 113 101 44 44 44 44 63 108 108 117 110 44 104 116 103 110 101 108 44 44 44 44 44 114 100 100 97 99 44 114 100 97 99 44 45 44 44 44 60 44 44 114 97 99 44 63 114 105 97 112 44 44 114 97 104 99 45 100 97 101 114 44 114 100 99 44 44 115 110 111 99 44 44 63 118 113 101 44 44 44 44 44 59 56 76 33 76 56 76 64 89 74 64 89 71 90 36 94 56 74 126 89 78 94 89 67 64 80 118 67 118 82 51 121 93 36 55 35 89 83 42 94 122 33 83 42 57 66 105 38 58 69 105 83 47 97 105 38 107 107 122 33 83 47 58 107 119 39 107 93 64 39 95 42 90 64 97 67 95 71 94 126 70 94 123 33 62 39 94 56 62 89 72 108 98 67 96 94 39 96 126 63 95 71 95 126 70 95 124 93 68 57 67 96 94 85 107 97 95 67 97 71 96 46 90 68 100 67 98 65 97 105 36 71 96 94 126 70 95 124 33 83 43 35 96 107 110 51 94 126 105 36 35 96 107 110 51 94 126 105 36 35 96 107 110 51 94 126 105 36 35 96 107 110 51 94 126 82 74 94 126 63 119 41 66 94 126 63 107 72 94 126 82 94 122 93 75 35 89 83 43 97 95 108 123 93 67 35 97 95 107 35 107 95 107 126 63 105 83 47 95 123 33 46 35 98 96 110 57 68 65 100 96 67 97 95 35 90 67 101 120 62 35 100 126 84 98 90 66 105 38 58 69 105 83 47 78 101 90 64 65 65 102 105 36 105 36 97 107 83 95 110 77 96 126 63 120 48 94 46 58 69 103 89 80 101 99 69 102 78 100 98 111 77 97 95 126 63 120 58 94 46 90 75 100 85 108 98 77 98 78 97 95 126 79 63 120 54 95 57 68 65 100 96 67 97 95 35 90 67 101 120 62 35 100 126 84 98 90 66 105 38 58 69 105 83 47 78 101 90 64 65 65 102 105 36 105 36 97 107 83 95 110 77 96 126 63 120 48 94 46 58 69 103 89 80 101 99 69 102 78 100 98 111 77 97 95 126 63 120 58 94 46 90 75 100 85 108 98 77 98 78 97 95 126 79 94 126 94 63 120 49 94 35 99 77 97 110 126 63 120 61 94 71 95 126 70 95 35 98 85 107 96 96 109 126 89 77 95 124 33 57 52 95 64 75 94 123 33 74 52 117 121 93 63 39 105 36 57 63 67 95 64 75 94 71 94 126 70 94 122 93 73 39 105 36 39 105 36 57 73 67 94 64 89 71 71 94 126 70 94 64 75 118 67 126 70 94 122 33 69 56 69 89 83 40 94 56 57 118 83 55 118 70 126 90 40 94 57 63 89 68 94 126 89 75 94 56 69 90 41 94 126 89 77 94 52 118 76 64 90 73 67 94 64 89 71 71 94 64 75 118 75 126 70 94 56 57 118 76 118 75 126 84 94 56 57 118 83 59 118 70 126 63 105 37 94 56 57 118 83 45 118 70 126 90 37 94 122 33 71 56 69 94 52 118 69 64 90 63 89 68 94 64 75 118 69 126 89 75 94 122 93 79 57 79 56 64 126 63 117 94 39 94 126 73 107 94 68 121 33 64 56 64 64 68 39 94 57 79 126 63 118 82 48 94 126 73 95 118 67 39 105 83 48 126 89 78 94 89 70 121 33 63 42 86 94 64 68 39 105 38 126 79 79 73 118 68 96 42 86 94 64 68 39 105 38 126 79 79 94 126 94 63 118 76 95 42 86 94 64 68 39 105 38 126 79 94 126 94 63 118 75 94 89 70 121 93 77 42 90 77 94 89 67 39 105 38 64 68 126 63 118 76 94 87 121 33 67 57 42 96 39 94 126 94 94 89 83 37 94 89 66 65 86 94 64 68 42 65 105 38 89 67 120 61 64 68 126 63 118 74 94 56 73 89 67 39 105 37 64 68 126 63 118 83 59 94 39 105 36 64 68 126 63 118 83 45 94 89 70 64 68 126 63 118 70 94 57 77 64 68 126 63 118 75 94 39 94 126 73 107 94 87 121 33 70 39 94 33 83 45 94 68 121 93 72 39 94 33 83 45 105 83 46 39 94 126 63 105 83 48 94 33 83 45 94 122 33 45 57 72 94 57 72 89 83 35 126 63 105 83 46 94 39 94 126 63 105 83 48 94 105 83 45 121 33 83 45 105 83 46 33 78 40 105 83 48 94 122 93 50 55 37 90 62 39 95 64 89 83 38 74 99 94 64 89 83 39 72 99 94 66 66 90 62 105 36 122 66 66 90 62 105 36 122 93 66 35 108 96 94 123 93 40 81 108 93 43 56 73 90 76 107 94 122 93 53 57 78 98 96 72 94 124 93 45 57 35 96 72 94 123 93 44 105 43 93 56 105 49 33 73 35 111 83 95 94 122 93 52 81 111 93 46 56 66 90 76 118 67 94 122 93 55 57 78 98 96 72 94 124 93 59 57 35 96 72 94 123 93 60 105 43 33 68 105 49 33 66 35 110 83 95 94 122 33 75 81 110 93 70 39 95 39 105 36 39 105 36 57 70 76 76 118 82 37 96 89 79 98 117 67 95 126 73 118 82 47 94 126 73 95 118 82 36 71 94 126 70 94 123 93 71 57 70 107 94 39 105 36 126 84 94 122 33 83 37 39 105 36 53 95 107 126 94 90 71 94 57 71 67 94 126 63 118 80 71 94 39 105 36 126 84 94 89 68 94 122 93 69 39 94 57 69 95 96 126 73 97 107 65 98 94 89 72 76 89 79 117 96 96 118 82 37 90 38 117 94 123 33 83 40 56 66 90 69 105 38 94 56 66 65 90 69 105 38 76 96 107 118 80 126 73 107 94 122 93 51 105 40 64 89 83 41 107 105 35 33 83 44 66 105 35 93 80 39 94 33 83 44 65 105 83 44 94 89 83 36 94 57 80 66 97 95 39 94 126 89 65 96 66 94 72 95 126 70 95 123 93 42 57 80 105 83 44 94 122 93 41 105 43 33 83 36 35 109 95 105 36 122 33 77 81 109 93 74 39 96 57 74 65 99 97 96 76 108 94 126 73 95 107 124 93 76 57 74 105 38 96 94 123 93 65 39 94 57 65 76 108 96 67 94 126 73 96 107 123 93 78 57 39 97 90 65 96 94 124 93 35 48 90 65 96 94 123 33 60 39 107 56 72 83 67 95 108 126 70 94 122 33 61 40 105 38 94 122 33 80 56 55 66 94 122 33 55 54 66 94 122 93 47 43 66 94 122 33 54 49 66 94 122 93 57 105 83 41 93 39 105 83 39 33 44 105 43 33 48 105 49 33 42 35 107 96 94 123 33 47 81 107 33 65 39 105 36 39 105 36 39 105 36 39 105 36 56 65 72 97 72 95 126 89 65 66 97 66 95 126 89 65 74 97 74 95 126 82 96 39 105 36 126 63 112 74 95 126 82 95 39 94 126 94 63 96 94 123 93 37 40 105 36 94 122 33 58 57 62 39 105 36 40 98 74 94 126 82 94 122 122 33 83 46 76 109 107 33 83 48 76 108 107 33 39 58 108 107 108 33 41 58 108 107 109 33 56 58 108 107 110 93 62 58 108 107 111 33 59 58 108 107 112 33 49 58 108 107 113 33 43 58 108 107 114 33 51 58 108 107 115 33 83 39 58 108 107 116 33 83 41 58 108 107 117 33 83 38 58 108 107 118 46 33 40 58 108 107 118 47 33 50 58 108 107 118 48 33 72 58 108 107 118 49 33 53 58 108 107 118 50 33 79 58 108 107 118 51 93 38 58 108 107 118 52 33 83 35 58 108 107 118 53 33 52 58 108 107 118 54 121


_VAR()
{
if [ $_C = ${_C#R} ]; then
  _B=$_S
  while [ $_C != 0 ]; do eval _B=\$_Y$_B; _C=$((_C-1)); done
  _C=$_B
fi
}

_GETCONT()
{
_I=$_S; eval _B=\$_Y$_I _P=\$_Z$_I
while [ $_P = 0 ]; do _I=$_B; eval _B=\$_Y$_I _P=\$_Z$_I; done
}

_PUSH()
{
_H=$((_H+1)); eval _XR$_H=$_C _YR$_H=$_S _ZR$_H=0; _S=R$_H
}

_GC()
{
eval _X$_T=$_S _Y$_T=$_P

_H=$((_H+1)) _I=$_H
while [ $_I -gt 0 ]; do eval _MR$_I=0; _I=$((_I-1)); done

_C=$_F _P=0

while true; do
  eval _I=\$_M$_C
  while [ $_I = 0 ]; do
    eval _M$_C=1
    _B=$_C
    eval _C=\$_X$_C _X$_B=$_P
    _P=$_B
    if [ $_C = ${_C#R} ]; then break; fi
    eval _I=\$_M$_C
  done
  while [ $_P != 0 ]; do
    eval _I=\$_M$_P
    if [ $_I = 1 ]; then
      eval _M$_P=2
      eval _B=\$_X$_P _X$_P=$_C
      eval _C=\$_Y$_P _Y$_P=$_B
      if [ $_C != ${_C#R} ]; then break; fi
    fi
    if [ $_I = 2 ]; then
      eval _M$_P=3
      eval _B=\$_Y$_P _Y$_P=$_C
      eval _C=\$_Z$_P _Z$_P=$_B
      if [ $_C != ${_C#R} ]; then break; fi
    fi
    if [ $_I = 3 ]; then
      eval _B=\$_Z$_P _Z$_P=$_C
      _C=$_P _P=$_B
      break
    fi
  done

  if [ $_P = 0 ]; then break; fi
done

_I=1 _P=$_H
while true; do
  eval _B=\$_MR$_I
  while [ $_B != 0 ]; do _I=$((_I+1)); eval _B=\$_MR$_I; done
  eval _B=\$_MR$_H
  while [ $_B = 0 ]; do _H=$((_H-1)); eval _B=\$_MR$_H; done
  if [ $_I -ge $_H ]; then break; fi
  eval _XR$_I=\$_XR$_H _YR$_I=\$_YR$_H _ZR$_I=\$_ZR$_H _MR$_I=1 _MR$_H=0 _XR$_H=$_I
  _I=$((_I+1)) _H=$((_H-1))
done

_I=$_H _L=$((_H*10+5000))

while [ $_I != 0 ]; do
  eval _C=\$_XR$_I
  if [ $_C != ${_C#R} ]; then
    eval _B=\$_M$_C
    if [ $_B = 0 ]; then eval _XR$_I=R\$_X$_C; fi
  fi
  eval _C=\$_YR$_I
  if [ $_C != ${_C#R} ]; then
    eval _B=\$_M$_C
    if [ $_B = 0 ]; then eval _YR$_I=R\$_X$_C; fi
  fi
  eval _C=\$_ZR$_I
  if [ $_C != ${_C#R} ]; then
    eval _B=\$_M$_C
    if [ $_B = 0 ]; then eval _ZR$_I=R\$_X$_C; fi
  fi
  _I=$((_I-1))
done

eval _S=\$_X$_T _P=\$_Y$_T
}

# build #f, #t, and ()

_H=0
_H=$((_H+1)) _F=R$_H; eval _XR$_H=0 _YR$_H=0 _ZR$_H=5
_H=$((_H+1)) _T=R$_H; eval _XR$_H=0 _YR$_H=0 _ZR$_H=5 _X$_F=$_T
_H=$((_H+1)) _N=R$_H; eval _XR$_H=0 _YR$_H=0 _ZR$_H=5 _Y$_F=$_N

# build symbol table

_P=0 _C=46
while [ $_C -gt 45 ]; do
  _P=$((_P*46+_C-46)); _C=$(($1-35)); shift; if [ $_C -lt 0 ]; then _C=57; fi
done
_P=$((_P*46+_C))

_B=$_N _S=$_N _I=0 _C=0; if [ $_P = 0 ]; then _C=$1; shift; fi
while true; do
  if [ $_P -gt 0 -o $_C = 44 -o $_C = 59 ]; then
    _H=$((_H+1)); eval _XR$_H=$_S _YR$_H=$_I _ZR$_H=3; _S=R$_H # list->string
    _H=$((_H+1)); eval _XR$_H=$_F _YR$_H=$_S _ZR$_H=2; _S=R$_H # string->ui-symbol
    _H=$((_H+1)); eval _XR$_H=$_S _YR$_H=$_B _ZR$_H=0; _B=R$_H
    _S=$_N _I=0 _P=$((_P-1))
    if [ $_C = 59 ]; then break; fi
    if [ $_P -lt 1 ]; then _C=$1; shift; fi
  else
    _H=$((_H+1)); eval _XR$_H=$_C _YR$_H=$_S _ZR$_H=0; _S=R$_H
    _I=$((_I+1)) _C=$1; shift
  fi
done

# decode compacted RVM code

while true; do
  _I=0 _C=$(($1-35)); shift; if [ $_C -lt 0 ]; then _C=57; fi
  for _P in 23 33 3 13 14 7; do
    if [ $_P -gt $_C ]; then break; fi
    _I=$((_I+1)) _C=$((_C-_P))
  done
  if [ $_I = 0 ]; then
    _H=$((_H+1)); eval _XR$_H=0 _YR$_H=$_S _ZR$_H=0; _S=R$_H
  else
    if [ $_I = 5 -a $_C = 5 ]; then
      eval _P=\$_X$_S _S=\$_Y$_S
      _H=$((_H+1)); eval _XR$_H=4 _YR$_H=$_P _ZR$_H=\$_X$_S _X$_S=R$_H
      continue
    fi
    _I=$((_I-1))
  fi
  _P=$((_C-_P+3)) _L=0
  if [ $_P -lt 0 ]; then
    _P=$_C
    if [ $_I -lt 2 ]; then _L=1; fi
  else
    if [ $_P -gt 0 ]; then _P=$((_P-1)); _L=1; fi
    _C=$(($1-35)); shift; if [ $_C -lt 0 ]; then _C=57; fi
    while [ $_C -gt 45 ]; do
      _P=$((_P*46+_C-46)); _C=$(($1-35)); shift; if [ $_C -lt 0 ]; then _C=57; fi
    done
    _P=$((_P*46+_C))
  fi

  if [ $_L = 1 ]; then
    _L=$_P _P=$_B
    while [ $_L -gt 0 ]; do
      eval _P=\$_Y$_P
      _L=$((_L-1))
    done
    eval _P=\$_X$_P
  fi

  if [ $_I -gt 3 ]; then
    _H=$((_H+1)) _I=R$_H; eval _XR$_H=$_P _YR$_H=0 _ZR$_H=\$_X$_S
    _H=$((_H+1)) _P=R$_H; eval _XR$_H=$_I _YR$_H=$_N _ZR$_H=1
    eval _S=\$_Y$_S
    if [ $_S = $_N ]; then break; fi
    _I=3
  fi

  _H=$((_H+1)); eval _XR$_H=$_I _YR$_H=$_P _ZR$_H=\$_X$_S _X$_S=R$_H

done

# setup rib, false, true, and nil global variables

eval _S=\$_X$_B _C=\$_Y$_B
_H=$((_H+1)); eval _XR$_H=0 _YR$_H=$_B _ZR$_H=1 _X$_S=R$_H _S=\$_X$_C _C=\$_Y$_C
eval _X$_S=$_F _S=\$_X$_C _C=\$_Y$_C
eval _X$_S=$_T _S=\$_X$_C _C=\$_Y$_C
eval _X$_S=$_N

# build initial continuation

_H=$((_H+1)) _B=R$_H; eval _XR$_H=5 _YR$_H=0 _ZR$_H=0 _P=\$_X$_P
_H=$((_H+1)) _S=R$_H; eval _XR$_H=0 _YR$_H=0 _ZR$_H=$_B _P=\$_Z$_P

_L=$((_H*10+5000))

# RVM code interpreter main loop

while true; do
  if [ $_H -ge $_L ]; then _GC; fi
  eval _B=\$_X$_P _C=\$_Y$_P _P=\$_Z$_P
  case $_B in
    0)
      _VAR
      eval _C=\$_X$_C
      eval _B=\$_X$_C
      if [ $_B = ${_B#R} ]; then

case $_B in
  0)
    eval _C=\$_X$_S _S=\$_Y$_S; eval _B=\$_X$_S _S=\$_Y$_S
    _H=$((_H+1)); eval _XR$_H=\$_X$_S _YR$_H=$_B _ZR$_H=$_C _S=\$_Y$_S; _C=R$_H
    _PUSH
    ;;
  1)
    ;;
  2)
    eval _S=\$_Y$_S
    ;;
  3)
    eval _C=\$_X$_S _S=\$_Y$_S
    eval _S=\$_Y$_S
    _PUSH
    ;;
  4)
    eval _C=\$_X$_S _S=\$_Y$_S
    _H=$((_H+1)); eval _XR$_H=\$_X$_C _YR$_H=$_S _ZR$_H=1; _C=R$_H
    _PUSH
    ;;
  5)
    eval _C=\$_X$_S _S=\$_Y$_S
    if [ $_C = ${_C#R} ]; then _C=$_F; else _C=$_T; fi
    _PUSH
    ;;
  6)
    eval _C=\$_X$_S _S=\$_Y$_S
    eval _C=\$_X$_C
    _PUSH
    ;;
  7)
    eval _C=\$_X$_S _S=\$_Y$_S
    eval _C=\$_Y$_C
    _PUSH
    ;;
  8)
    eval _C=\$_X$_S _S=\$_Y$_S
    eval _C=\$_Z$_C
    _PUSH
    ;;
  9)
    eval _C=\$_X$_S _S=\$_Y$_S; eval _B=\$_X$_S _S=\$_Y$_S
    eval _X$_B=$_C
    _PUSH
    ;;
 10)
    eval _C=\$_X$_S _S=\$_Y$_S; eval _B=\$_X$_S _S=\$_Y$_S
    eval _Y$_B=$_C
    _PUSH
    ;;
 11)
    eval _C=\$_X$_S _S=\$_Y$_S; eval _B=\$_X$_S _S=\$_Y$_S
    eval _Z$_B=$_C
    _PUSH
    ;;
 12)
    eval _C=\$_X$_S _S=\$_Y$_S; eval _B=\$_X$_S _S=\$_Y$_S
    if [ $_B = $_C ]; then _C=$_T; else _C=$_F; fi
    _PUSH
    ;;
 13)
    eval _C=\$_X$_S _S=\$_Y$_S; eval _B=\$_X$_S _S=\$_Y$_S
    if [ $_B -lt $_C ]; then _C=$_T; else _C=$_F; fi
    _PUSH
    ;;
 14)
    eval _C=\$_X$_S _S=\$_Y$_S; eval _B=\$_X$_S _S=\$_Y$_S
    _C=$((_B+_C))
    _PUSH
    ;;
 15)
    eval _C=\$_X$_S _S=\$_Y$_S; eval _B=\$_X$_S _S=\$_Y$_S
    _C=$((_B-_C))
    _PUSH
    ;;
 16)
    eval _C=\$_X$_S _S=\$_Y$_S; eval _B=\$_X$_S _S=\$_Y$_S
    _C=$((_B*_C))
    _PUSH
    ;;
 17)
    eval _C=\$_X$_S _S=\$_Y$_S; eval _B=\$_X$_S _S=\$_Y$_S
    _C=$((_B/_C))
    _PUSH
    ;;
 18)
    if [ $# = 0 ]; then
      if [ -t 0 ]; then
        set 0 `sed q | od -v -A n -t u1`
      else
        set 0 `od -v -A n -t u1`
      fi
      if [ $# = 1 ]; then set 0 -1; fi; shift
    fi
    _C=$1; shift
    _PUSH
    ;;
 19)
    eval _C=\$_X$_S
    printf \\$(($_C/64))$(($_C/8%8))$(($_C%8))
    ;;
 20)
    eval exit \$_X$_S
    ;;
esac

        if [ $_P = ${_P#R} ]; then
          _GETCONT
          eval _Y$_S=\$_X$_I
        fi
      else
        _H=$((_H+1)); eval _XR$_H=0 _YR$_H=$_C _ZR$_H=0; _C=R$_H _A=R$_H _Q=$_B
        eval _I=\$_X$_Q
        while [ $_I -gt 0 ]; do
          _H=$((_H+1)); eval _XR$_H=\$_X$_S _YR$_H=$_A _ZR$_H=0 _S=\$_Y$_S; _A=R$_H
          _I=$((_I-1))
        done
        if [ $_P = ${_P#R} ]; then
          _GETCONT
          eval _X$_C=\$_X$_I _Z$_C=$_P
        else
          eval _X$_C=$_S _Z$_C=$_P
        fi
        eval _P=\$_Z$_Q; _S=$_A
      fi
      ;;
    1)
      _VAR
      eval _X$_C=\$_X$_S _S=\$_Y$_S
      ;;
    2)
      _VAR
      eval _C=\$_X$_C
      _PUSH
      ;;
    3)
      _PUSH
      ;;
    4)
      eval _B=\$_X$_S _S=\$_Y$_S
      if [ $_B != $_F ]; then _P=$_C; fi
      ;;
    5)
      exit
      ;;
  esac
done
